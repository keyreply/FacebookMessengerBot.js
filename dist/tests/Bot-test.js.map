{"version":3,"sources":["../../src/tests/Bot-test.js"],"names":["token","process","env","PAGE_ACCESS_TOKEN","describe","bot","it","once","message","sender","fetch","equal","first_name","last_name","fromCache","done","handleMessage","text","entry","messaging","images","attachments","payload","url"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQC,GAAR,CAAYC,iBAA1B;;AAEAC,SAAS,KAAT,EAAgB,YAAM;AACpB,MAAMC,MAAM,UAAQL,KAAR,CAAZ;;AAEA,MAAIA,KAAJ,EAAW;AACTM,OAAG,2BAAH,EAAgC,gBAAQ;AACtCD,UAAIE,IAAJ,CAAS,SAAT;AAAA,qFAAoB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,wBADU,GACCD,OADD,CACVC,MADU;AAAA;AAAA,yBAEZA,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CAFY;;AAAA;;AAIlB,mCAAOC,KAAP,CAAaF,OAAOG,UAApB,EAAgC,QAAhC;AACA,mCAAOD,KAAP,CAAaF,OAAOI,SAApB,EAA+B,QAA/B;AACA,mCAAOF,KAAP,CAAaF,OAAOK,SAApB,EAA+B,KAA/B;;AANkB;AAAA,yBAQZL,OAAOC,KAAP,CAAa,sBAAb,EAAqC,IAArC,CARY;;AAAA;AASlB,mCAAOC,KAAP,CAAaF,OAAOK,SAApB,EAA+B,IAA/B;AACAC;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;;AAAA;AAAA;AAAA;AAAA;;AAaAV,UAAIW,aAAJ;AACD,KAfD;AAgBD;;AAEDV,KAAG,qBAAH,EAA0B,gBAAQ;AAChCD,QAAIE,IAAJ,CAAS,SAAT;AAAA,oFAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClB,iCAAOG,KAAP,CAAaH,QAAQS,IAArB,EAA2B,eAAKC,KAAL,CAAW,CAAX,EAAcC,SAAd,CAAwB,CAAxB,EAA2BX,OAA3B,CAAmCS,IAA9D;AACAF;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAKAV,QAAIW,aAAJ;AACD,GAPD;;AASAV,KAAG,uBAAH,EAA4B,gBAAQ;AAClCD,QAAIE,IAAJ,CAAS,SAAT;AAAA,oFAAoB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAClB,iCAAOG,KAAP,CACEH,QAAQY,MAAR,CAAe,CAAf,CADF,EAEE,gBAAMF,KAAN,CAAY,CAAZ,EAAeC,SAAf,CAAyB,CAAzB,EAA4BX,OAA5B,CAAoCa,WAApC,CAAgD,CAAhD,EAAmDC,OAAnD,CAA2DC,GAF7D;AAIAR;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;;AAQAV,QAAIW,aAAJ;AACD,GAVD;AAWD,CA1CD","file":"Bot-test.js","sourcesContent":["import assert from \"assert\";\r\nimport { Bot } from \"../..\";\r\nimport text from \"../../fixtures/text.json\";\r\nimport image from \"../../fixtures/image.json\";\r\n\r\nconst token = process.env.PAGE_ACCESS_TOKEN;\r\n\r\ndescribe(\"Bot\", () => {\r\n  const bot = new Bot(token);\r\n\r\n  if (token) {\r\n    it(\"should fetch user profile\", done => {\r\n      bot.once(\"message\", async message => {\r\n        const { sender } = message;\r\n        await sender.fetch(\"first_name,last_name\", true);\r\n\r\n        assert.equal(sender.first_name, \"Mathew\");\r\n        assert.equal(sender.last_name, \"Kurian\");\r\n        assert.equal(sender.fromCache, false);\r\n\r\n        await sender.fetch(\"first_name,last_name\", true);\r\n        assert.equal(sender.fromCache, true);\r\n        done();\r\n      });\r\n\r\n      bot.handleMessage(text);\r\n    });\r\n  }\r\n\r\n  it(\"should extract text\", done => {\r\n    bot.once(\"message\", async message => {\r\n      assert.equal(message.text, text.entry[0].messaging[0].message.text);\r\n      done();\r\n    });\r\n\r\n    bot.handleMessage(text);\r\n  });\r\n\r\n  it(\"should extract images\", done => {\r\n    bot.once(\"message\", async message => {\r\n      assert.equal(\r\n        message.images[0],\r\n        image.entry[0].messaging[0].message.attachments[0].payload.url\r\n      );\r\n      done();\r\n    });\r\n\r\n    bot.handleMessage(image);\r\n  });\r\n});\r\n"]}